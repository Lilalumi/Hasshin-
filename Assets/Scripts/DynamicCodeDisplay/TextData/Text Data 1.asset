%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 646c6b769fd7da5439215dc13e984256, type: 3}
  m_Name: Text Data 1
  m_EditorClassIdentifier: 
  content: "using UnityEngine;\r\n\r\npublic class Health : MonoBehaviour\r\n{\r\n   
    public int health = 100; // Salud inicial del objeto\r\n    public float effectDuration
    = 1f; // Duraci\xF3n del efecto de muerte\r\n    public float sizeAugment = 2f;
    // Velocidad de aumento de tama\xF1o durante el efecto\r\n\r\n    [Header(\"Visual
    Effects\")]\r\n    public Material dissolveMaterial; // Material que controla
    el efecto de disoluci\xF3n\r\n    public string dissolveAmountProperty = \"_DissolveAmount\";
    // Nombre de la propiedad del material\r\n    public GameObject destructionEffectPrefab;
    // Prefab de part\xEDculas para el efecto de destrucci\xF3n\r\n    public AnimationCurve
    healthToDissolveCurve = AnimationCurve.Linear(0f, 0f, 1f, 1.1f); // Curva de
    relaci\xF3n entre salud y disoluci\xF3n\r\n\r\n    private bool isDying = false;
    // Bandera para evitar m\xFAltiples activaciones del efecto\r\n    private SpriteRenderer
    spriteRenderer; // Referencia al SpriteRenderer\r\n    private Material instanceMaterial;
    // Material instanciado para cada enemigo\r\n    private int maxHealth; // Salud
    m\xE1xima inicial\r\n\r\n    private void Awake()\r\n    {\r\n        spriteRenderer
    = GetComponent<SpriteRenderer>();\r\n\r\n        if (spriteRenderer != null)\r\n       
    {\r\n            // Crear una instancia del material para evitar modificar el
    original\r\n            instanceMaterial = Instantiate(dissolveMaterial);\r\n           
    spriteRenderer.material = instanceMaterial;\r\n        }\r\n        else\r\n       
    {\r\n            Debug.LogError(\"No se encontr\xF3 un SpriteRenderer en el objeto.\");\r\n       
    }\r\n\r\n        maxHealth = health; // Almacena la salud m\xE1xima inicial\r\n       
    UpdateDissolveEffect(); // Inicializa el efecto visual\r\n    }\r\n\r\n    public
    void TakeDamage(int damage)\r\n    {\r\n        health -= damage;\r\n       
    health = Mathf.Max(health, 0); // Evita valores negativos\r\n        UpdateDissolveEffect();\r\n\r\n       
    if (health <= 0 && !isDying)\r\n        {\r\n            Die();\r\n        }\r\n   
    }\r\n\r\n    private void UpdateDissolveEffect()\r\n    {\r\n        if (instanceMaterial
    == null || !instanceMaterial.HasProperty(dissolveAmountProperty)) return;\r\n\r\n       
    // Normaliza la salud entre 0 y 1\r\n        float normalizedHealth = (float)health
    / maxHealth;\r\n\r\n        // Calcula el valor usando la curva\r\n        float
    dissolveAmount = healthToDissolveCurve.Evaluate(1f - normalizedHealth);\r\n\r\n       
    // Aplica el valor de forma progresiva\r\n        LeanTween.value(gameObject,
    \r\n                        instanceMaterial.GetFloat(dissolveAmountProperty),
    \r\n                        dissolveAmount, \r\n                        0.3f)\r\n           
    .setOnUpdate((float value) => \r\n            {\r\n                instanceMaterial.SetFloat(dissolveAmountProperty,
    value);\r\n            });\r\n    }\r\n\r\n    private void Die()\r\n    {\r\n       
    isDying = true;\r\n\r\n        // Deshabilitar los colliders\r\n        Collider2D[]
    colliders = GetComponents<Collider2D>();\r\n        foreach (Collider2D col in
    colliders)\r\n        {\r\n            col.enabled = false;\r\n        }\r\n\r\n       
    // Instanciar efecto de part\xEDculas si existe\r\n        if (destructionEffectPrefab
    != null)\r\n        {\r\n            Instantiate(destructionEffectPrefab, transform.position,
    Quaternion.identity);\r\n        }\r\n\r\n        // Iniciar la animaci\xF3n
    de muerte\r\n        StartCoroutine(DeathEffect());\r\n    }\r\n\r\n    private
    System.Collections.IEnumerator DeathEffect()\r\n    {\r\n        float elapsedTime
    = 0f;\r\n        Vector3 initialScale = transform.localScale;\r\n\r\n       
    while (elapsedTime < effectDuration)\r\n        {\r\n            elapsedTime
    += Time.deltaTime;\r\n\r\n            // Aumentar el tama\xF1o durante la muerte\r\n           
    float scaleMultiplier = 1f + (elapsedTime / effectDuration) * sizeAugment;\r\n           
    transform.localScale = initialScale * scaleMultiplier;\r\n\r\n            yield
    return null;\r\n        }\r\n\r\n        // Asegurarse de que el objeto sea completamente
    destruido\r\n        Destroy(gameObject);\r\n    }\r\n}\r\n"
