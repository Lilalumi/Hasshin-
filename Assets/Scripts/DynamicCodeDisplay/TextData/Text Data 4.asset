%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 646c6b769fd7da5439215dc13e984256, type: 3}
  m_Name: Text Data 4
  m_EditorClassIdentifier: 
  content: "using UnityEngine;\r\nusing TMPro;\r\nusing System.Collections;\r\n\r\npublic
    class DataShardsUI : MonoBehaviour\r\n{\r\n    public DataShardsController dataShardsController;
    // Referencia al controlador de Data Shards\r\n    public TextMeshProUGUI dataShardsText;
    // Referencia al componente TextMeshPro\r\n\r\n    [Header(\"Animation Settings\")]\r\n   
    public AnimationCurve speedCurve = AnimationCurve.Linear(0, 1, 1, 0); // Curva
    de velocidad de la animaci\xF3n\r\n    public float totalAnimationDuration =
    1f; // Duraci\xF3n total de la animaci\xF3n\r\n    public Color changeColor =
    Color.yellow; // Color de transici\xF3n durante la animaci\xF3n\r\n    public
    float colorDuration = 0.2f; // Duraci\xF3n del cambio de color\r\n\r\n    private
    int lastDataShards = -1; // Almacena la cantidad previa de Data Shards\r\n   
    private Color originalColor; // Almacena el color original del texto\r\n    private
    Coroutine activeCoroutine; // Referencia a la animaci\xF3n activa\r\n\r\n   
    void Start()\r\n    {\r\n        if (dataShardsController == null)\r\n       
    {\r\n            Debug.LogError(\"DataShardsController no asignado en el inspector.\");\r\n       
    }\r\n\r\n        if (dataShardsText == null)\r\n        {\r\n            Debug.LogError(\"TextMeshProUGUI
    no asignado en el inspector.\");\r\n        }\r\n\r\n        // Almacena el color
    original\r\n        originalColor = dataShardsText.color;\r\n\r\n        // Inicializa
    el texto\r\n        lastDataShards = dataShardsController.GetDataShards();\r\n       
    dataShardsText.text = $\"DATASHARDS: {lastDataShards:0000}\";\r\n    }\r\n\r\n   
    void Update()\r\n    {\r\n        UpdateDataShardsUI();\r\n    }\r\n\r\n    void
    UpdateDataShardsUI()\r\n    {\r\n        if (dataShardsController != null &&
    dataShardsText != null)\r\n        {\r\n            int dataShards = dataShardsController.GetDataShards();\r\n\r\n           
    if (dataShards != lastDataShards) // Solo actualiza si hay un cambio\r\n           
    {\r\n                // Cancela la animaci\xF3n activa, si existe\r\n               
    if (activeCoroutine != null)\r\n                {\r\n                    StopCoroutine(activeCoroutine);\r\n               
    }\r\n\r\n                // Inicia una nueva animaci\xF3n\r\n               
    activeCoroutine = StartCoroutine(AnimateNumberIncrement(lastDataShards, dataShards));\r\n               
    lastDataShards = dataShards;\r\n            }\r\n        }\r\n    }\r\n\r\n   
    private IEnumerator AnimateNumberIncrement(int oldNumber, int newNumber)\r\n   
    {\r\n        int currentNumber = oldNumber;\r\n        float elapsedTime = 0f;\r\n       
    float stepTime = totalAnimationDuration / Mathf.Max(1, newNumber - oldNumber);
    // Tiempo por paso basado en los incrementos\r\n\r\n        while (currentNumber
    < newNumber)\r\n        {\r\n            currentNumber++;\r\n\r\n           
    // Actualiza el texto y aplica el efecto de color\r\n            UpdateTextWithColor(currentNumber);\r\n\r\n           
    // Calcula el retraso basado en la curva\r\n            float progress = (float)(currentNumber
    - oldNumber) / (newNumber - oldNumber); // Progreso normalizado\r\n           
    float delay = speedCurve.Evaluate(progress) * stepTime;\r\n\r\n            elapsedTime
    += delay;\r\n            yield return new WaitForSeconds(delay);\r\n        }\r\n\r\n       
    // Asegura que el color vuelva al original\r\n        dataShardsText.color =
    originalColor;\r\n        activeCoroutine = null; // Limpia la referencia al
    completar\r\n    }\r\n\r\n    private void UpdateTextWithColor(int number)\r\n   
    {\r\n        // Cambia temporalmente el color\r\n        LeanTween.value(gameObject,
    UpdateTextColor, changeColor, originalColor, colorDuration);\r\n        dataShardsText.text
    = $\"DATASHARDS: {number:0000}\";\r\n    }\r\n\r\n    private void UpdateTextColor(Color
    color)\r\n    {\r\n        dataShardsText.color = color;\r\n    }\r\n}\r\n"
